/**
 * Servicio de An√°lisis de IA para Sentencias Judiciales
 * Integra OpenAI GPT-4 Mini y Google Gemini para an√°lisis autom√°tico
 */

import { logger } from '@/utils/logger';
import { documentTextExtractor, DocumentTextExtractor } from '@/services/DocumentTextExtractor';
import * as fs from 'fs';
import * as path from 'path';

// Interfaces para el an√°lisis
interface DocumentAnalysis {
  temaPrincipal: string;
  resumenIA: string;
  decision: string;
  numeroSentencia?: string;
  magistradoPonente?: string;
  salaRevision?: string;
  expediente?: string;
  fragmentosAnalizados: string[];
  modeloUsado: string;
  confidencia: number;
}

interface FragmentSelection {
  introduccion: string;
  considerandos: string;
  resuelve: string;
  otros: string[];
}

export class AiAnalysisService {
  private openAiApiKey?: string;
  private geminiApiKey?: string;
  private defaultModel: 'openai' | 'gemini' = 'openai';

  constructor() {
    this.openAiApiKey = process.env.OPENAI_API_KEY;
    this.geminiApiKey = process.env.GEMINI_API_KEY;

    if (!this.openAiApiKey && !this.geminiApiKey) {
      logger.warn('‚ö†Ô∏è  No se encontraron API keys para servicios de IA');
    }

    // Determinar modelo por defecto
    if (this.openAiApiKey) {
      this.defaultModel = 'openai';
    } else if (this.geminiApiKey) {
      this.defaultModel = 'gemini';
    }

    logger.info(`ü§ñ AiAnalysisService iniciado - Modelo por defecto: ${this.defaultModel}`);
  }

  /**
   * Analizar documento completo con IA
   */
  async analyzeDocument(
    documentContent: string,
    documentTitle: string,
    model?: 'openai' | 'gemini'
  ): Promise<DocumentAnalysis | null> {
    try {
      const modelToUse = model || this.defaultModel;
      
      logger.info(`üîç Iniciando an√°lisis de IA: "${documentTitle}" con ${modelToUse}`);

      // 1. Preparar contenido para an√°lisis
      let processedContent = documentContent;
      
      // Verificar si es contenido binario DOCX y extraer texto
      if (this.isLikelyDocxContent(documentContent)) {
        logger.info('üìÑ Detectado contenido DOCX binario, extrayendo texto...');
        
        const extractedContent = await this.extractTextFromDocxContent(documentContent, documentTitle);
        if (extractedContent) {
          processedContent = this.buildTextFromExtractedContent(extractedContent);
          logger.info(`‚úÖ Texto extra√≠do exitosamente: ${processedContent.length} caracteres`);
        } else {
          logger.error('‚ùå No se pudo extraer texto del contenido DOCX');
          return null;
        }
      }

      // üéØ STEP 1: Extraer metadatos estructurales con regex (pre-IA)
      const regexMetadata = this.extractMetadataWithRegex(processedContent, documentTitle);
      logger.info(`üìä Metadatos regex extra√≠dos: Magistrado: ${regexMetadata.magistradoPonente || 'N/A'}, Expediente: ${regexMetadata.expediente || 'N/A'}, Sentencia: ${regexMetadata.numeroSentencia || 'N/A'}`);

      // 2. Seleccionar fragmentos clave
      const fragments = await this.selectKeyFragments(processedContent);
      
      if (!fragments) {
        logger.error('‚ùå No se pudieron extraer fragmentos del documento');
        return null;
      }

      // 2. Realizar an√°lisis con el modelo seleccionado
      let analysis: DocumentAnalysis | null = null;
      
      if (modelToUse === 'openai' && this.openAiApiKey) {
        analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
      } else if (modelToUse === 'gemini' && this.geminiApiKey) {
        analysis = await this.analyzeWithGemini(fragments, documentTitle);
      }

      if (!analysis) {
        // Intentar con el otro modelo como fallback
        const fallbackModel = modelToUse === 'openai' ? 'gemini' : 'openai';
        logger.info(`üîÑ Intentando con modelo de respaldo: ${fallbackModel}`);
        
        if (fallbackModel === 'openai' && this.openAiApiKey) {
          analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
        } else if (fallbackModel === 'gemini' && this.geminiApiKey) {
          analysis = await this.analyzeWithGemini(fragments, documentTitle);
        }
      }

      if (analysis) {
        logger.info(`‚úÖ An√°lisis completado exitosamente con ${analysis.modeloUsado}`);
        
        // üéØ STEP 2: Combinar metadatos regex + IA (regex tiene prioridad para campos estructurales)
        analysis = this.combineMetadata(regexMetadata, analysis);
        
        logger.info(`üîç Metadatos finales: Magistrado: ${analysis.magistradoPonente || 'N/A'}, Sala: ${analysis.salaRevision || 'N/A'}, Expediente: ${analysis.expediente || 'N/A'}`);
      }

      return analysis;

    } catch (error) {
      logger.error(`‚ùå Error en an√°lisis de IA: ${error}`);
      return null;
    }
  }

  /**
   * Seleccionar fragmentos clave del documento para an√°lisis optimizado
   */
  private async selectKeyFragments(content: string): Promise<FragmentSelection | null> {
    try {
      const normalizedContent = content.toLowerCase();

      // Patrones para identificar secciones importantes
      const patterns = {
        // Encabezado con informaci√≥n estructural
        encabezado: /(?:rep√∫blica\s+de\s+colombia|corte\s+constitucional|sentencia\s+[tc]-\d|expediente|(?:magistrado|magistrada)\s+ponente)/i,
        introduccion: /(?:en\s+la\s+ciudad\s+de|la\s+corte\s+constitucional|sala\s+plena)/i,
        antecedentes: /(?:antecedentes|i\.\s*antecedentes|1\.\s*antecedentes)/i,
        considerandos: /(?:consideraciones|considerandos|ii\.\s*consideraciones|2\.\s*consideraciones|fundamentos\s+jur√≠dicos)/i,
        resuelve: /(?:resuelve|decide|falla|iii\.\s*decisi√≥n|3\.\s*decisi√≥n)/i,
        ratioDecidendi: /(?:ratio\s+decidendi|fundamento\s+central|tesis\s+principal)/i
      };

      const fragments: FragmentSelection = {
        introduccion: '',
        considerandos: '',
        resuelve: '',
        otros: []
      };

      // Dividir el contenido en l√≠neas para capturar mejor el encabezado
      const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 20);

      // 1. PRIORIDAD: Capturar encabezado con datos estructurales
      const header = [];
      for (let i = 0; i < Math.min(lines.length, 30); i++) {
        const line = lines[i];
        if (line.length > 3) { // Evitar l√≠neas muy cortas
          header.push(line);
        }
        if (header.length >= 20) break; // Limitar el encabezado
      }
      
      // El encabezado siempre debe incluirse en introducci√≥n
      fragments.introduccion = header.join('\n') + '\n\n';

      // 2. Buscar secciones adicionales
      let considerandosFound = false;
      let resuelveFound = false;

      for (const paragraph of paragraphs) {
        const paragraphLower = paragraph.toLowerCase();

        // Agregar m√°s contenido de introducci√≥n si es relevante
        if (fragments.introduccion.length < 2000 && patterns.introduccion.test(paragraphLower)) {
          fragments.introduccion += paragraph + '\n\n';
        }

        // Buscar considerandos (parte central de la sentencia)
        if (!considerandosFound && patterns.considerandos.test(paragraphLower)) {
          considerandosFound = true;
        }
        
        if (considerandosFound && !resuelveFound && fragments.considerandos.length < 3000) {
          fragments.considerandos += paragraph + '\n\n';
        }

        // Buscar parte resolutiva
        if (!resuelveFound && patterns.resuelve.test(paragraphLower)) {
          resuelveFound = true;
        }

        if (resuelveFound && fragments.resuelve.length < 1000) {
          fragments.resuelve += paragraph + '\n\n';
        }

        // Capturar otros fragmentos relevantes
        if (patterns.ratioDecidendi.test(paragraphLower) && paragraph.length > 100) {
          fragments.otros.push(paragraph);
        }
      }

      // 3. Validar y aplicar fallback si es necesario
      if (fragments.considerandos.length < 500) {
        logger.warn('‚ö†Ô∏è  Pocos considerandos encontrados, usando contenido central');
        const middleStart = Math.floor(content.length * 0.3);
        const middleEnd = Math.floor(content.length * 0.7);
        fragments.considerandos = content.substring(middleStart, middleEnd);
      }

      if (fragments.resuelve.length < 200) {
        logger.warn('‚ö†Ô∏è  Parte resolutiva corta, usando contenido final');
        const finalPart = paragraphs.slice(-3).join('\n\n');
        fragments.resuelve = finalPart.substring(0, 1000);
      }

      logger.info(`üìÑ Fragmentos extra√≠dos: ${fragments.introduccion.length + fragments.considerandos.length + fragments.resuelve.length} caracteres`);

      return fragments;

    } catch (error) {
      logger.error(`‚ùå Error seleccionando fragmentos: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con OpenAI GPT-4 Mini
   */
  private async analyzeWithOpenAI(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const OpenAI = (await import('openai')).default;
      const openai = new OpenAI({
        apiKey: this.openAiApiKey
      });

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      logger.info('üîç Enviando an√°lisis a OpenAI GPT-4 Mini...');

      const response = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Eres un experto jurista especializado en an√°lisis de sentencias judiciales colombianas. 
                     Tu tarea es analizar sentencias de la Corte Constitucional y extraer informaci√≥n clave.
                     Responde siempre en espa√±ol y mant√©n un tono profesional y preciso.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.3, // Baja temperatura para respuestas m√°s consistentes
        response_format: { type: "json_object" }
      });

      const result = response.choices[0]?.message?.content;
      
      if (!result) {
        logger.error('‚ùå OpenAI no devolvi√≥ respuesta');
        return null;
      }

      const parsedResult = JSON.parse(result);

      // Funci√≥n helper para limpiar respuestas "no disponible" - Mejorada para C-223/2025
      const cleanField = (value: string | null | undefined): string | null => {
        if (!value) return null;
        
        const trimmed = value.trim();
        const lower = trimmed.toLowerCase();
        
        // Patrones que indican "no encontrado"
        if (lower === 'no disponible' || 
            lower === 'no identificado' ||
            lower === 'no especificado' ||
            lower === 'no se encuentra' ||
            lower === 'n/a' ||
            lower === 'null' ||
            lower === 'undefined' ||
            trimmed.length < 2) {
          return null;
        }
        
        // Limpiar puntos finales innecesarios pero conservar el contenido
        return trimmed.replace(/\.$/, '');
      };

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: cleanField(parsedResult.numero_sentencia),
        magistradoPonente: cleanField(parsedResult.magistrado_ponente),
        salaRevision: cleanField(parsedResult.sala_revision),
        expediente: cleanField(parsedResult.expediente),
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gpt-4o-mini',
        confidencia: parsedResult.confidencia || 0.8
      };

    } catch (error) {
      logger.error(`‚ùå Error con OpenAI: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con Google Gemini
   */
  private async analyzeWithGemini(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const { GoogleGenerativeAI } = await import('@google/generative-ai');
      const genAI = new GoogleGenerativeAI(this.geminiApiKey!);
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      logger.info('üîç Enviando an√°lisis a Google Gemini...');

      const result = await model.generateContent([prompt]);
      const response = await result.response;
      const text = response.text();

      if (!text) {
        logger.error('‚ùå Gemini no devolvi√≥ respuesta');
        return null;
      }

      // Intentar parsear como JSON
      let parsedResult;
      try {
        // Limpiar la respuesta por si tiene caracteres extra
        const cleanedText = text.replace(/```json\s*|\s*```/g, '').trim();
        parsedResult = JSON.parse(cleanedText);
      } catch (parseError) {
        logger.warn('‚ö†Ô∏è  Respuesta de Gemini no es JSON v√°lido, parseando manualmente');
        
        // Fallback parsing manual
        parsedResult = {
          tema_principal: this.extractFromText(text, /tema principal:?\s*([^\n]+)/i),
          resumen: this.extractFromText(text, /resumen:?\s*([^\n]+)/i),
          decision: this.extractFromText(text, /decisi√≥n:?\s*([^\n]+)/i),
          numero_sentencia: this.extractFromText(text, /n√∫mero.*sentencia:?\s*([^\n]+)/i),
          magistrado_ponente: this.extractFromText(text, /(?:magistrado|magistrada).*ponente:?\s*([^\n.,]+?)(?:[.,\n]|$)/i),
          sala_revision: this.extractFromText(text, /sala.*revisi√≥n:?\s*([^\n]+)/i),
          expediente: this.extractFromText(text, /expediente:?\s*([^\n]+)/i),
          confidencia: 0.7
        };
      }

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: parsedResult.numero_sentencia || null,
        magistradoPonente: parsedResult.magistrado_ponente || null,
        salaRevision: parsedResult.sala_revision || null,
        expediente: parsedResult.expediente || null,
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gemini-1.5-flash',
        confidencia: parsedResult.confidencia || 0.7
      };

    } catch (error) {
      logger.error(`‚ùå Error con Gemini: ${error}`);
      return null;
    }
  }

  /**
   * Construir prompt de an√°lisis optimizado
   */
  private buildAnalysisPrompt(fragments: FragmentSelection, documentTitle: string): string {
    return `
Analiza la siguiente sentencia judicial colombiana y extrae la informaci√≥n solicitada. Responde en formato JSON v√°lido.

**T√≠tulo del documento**: ${documentTitle}

**Fragmentos clave de la sentencia**:

**INTRODUCCI√ìN Y DATOS B√ÅSICOS**:
${fragments.introduccion}

**CONSIDERACIONES Y FUNDAMENTOS**:
${fragments.considerandos}

**PARTE RESOLUTIVA**:
${fragments.resuelve}

**INSTRUCCIONES DE EXTRACCI√ìN**:
1. Identifica el TEMA PRINCIPAL de la sentencia (materia jur√≠dica central)
2. Redacta un RESUMEN conciso de m√°ximo 200 palabras
3. Identifica la DECISI√ìN final del tribunal (estimatoria, desestimatoria, exequibilidad, etc.)

4. **EXTRACCI√ìN ESTRUCTURAL ESPEC√çFICA** - Busca estos campos exactos en el documento:

   **N√öMERO DE SENTENCIA**: 
   - Busca patrones como: "SENTENCIA T-123/2025", "C-456/2025", "SU-789/2025"
   - Tambi√©n: "Sentencia T-123 de 2025", "C-456 de 2025"
   - Extrae solo el c√≥digo: "T-123/2025", "C-456/2025", etc.

   **MAGISTRADO PONENTE**:
   - Busca l√≠neas como: "Magistrado ponente: [NOMBRE]", "Magistrada ponente: [NOMBRE]", "M.P.: [NOMBRE]"
   - Tambi√©n: "Magistrado Sustanciador:", "Magistrada Sustanciadora:", "Ponente:", "Magistrado(a) Ponente"
   - IMPORTANTE: Puede ser masculino O femenino (Magistrado/Magistrada)
   - Extrae el nombre completo exactamente como aparece, incluyendo puntos finales

   **SALA DE REVISI√ìN**:
   - Busca: "Sala Primera", "Sala Segunda", "Sala Tercera", "Sala Plena"
   - Tambi√©n: "-Sala Primera-", "Sala Primera de Revisi√≥n", "Sala Plena de la Corte"
   - Mant√©n el formato encontrado: "Sala Primera", "Sala Plena", etc.

   **EXPEDIENTE**:
   - Busca: "Expediente: [C√ìDIGO]", "Exp.: [C√ìDIGO]", "Expediente No. [C√ìDIGO]"
   - Patrones t√≠picos: "D-15.479", "D-15.207", "T-1234567", "E-123", etc.
   - IMPORTANTE: Los c√≥digos pueden tener m√∫ltiples n√∫meros y puntos (D-15.207)
   - Puede tener punto final (ej: "Expediente: D-15.207.")
   - Extrae el c√≥digo COMPLETO del expediente, SIN el punto final
   - EJEMPLO: "Expediente: D-15.207." ‚Üí expediente: "D-15.207"

5. **REGLAS IMPORTANTES**:
   - Si encuentras la informaci√≥n, extr√°ela exactamente como aparece en el documento
   - Si NO encuentras un campo espec√≠fico, usa null (sin comillas en JSON)
   - NO inventes o deduzcas informaci√≥n que no est√© expl√≠cita
   - Prioriza la informaci√≥n que aparece al inicio del documento (encabezado)

6. Asigna un nivel de CONFIDENCIA del an√°lisis (0.1 a 1.0)

**FORMATO DE RESPUESTA** (JSON estricto):
{
  "tema_principal": "Tema o materia principal de la sentencia",
  "resumen": "Resumen conciso de los hechos, argumentos y conclusiones",
  "decision": "Decisi√≥n final del tribunal con el sentido del fallo",
  "numero_sentencia": "T-353/2025",
  "magistrado_ponente": "Jorge Enrique Ib√°√±ez Najar",
  "sala_revision": "Sala Plena",
  "expediente": "D-15.479",
  "confidencia": 0.9
}

**EJEMPLOS DE EXTRACCI√ìN CORRECTA**:
- Si ves "SENTENCIA C-278 de 2025" ‚Üí numero_sentencia: "C-278/2025"
- Si ves "Magistrado ponente: Jorge Enrique Ib√°√±ez Najar" ‚Üí magistrado_ponente: "Jorge Enrique Ib√°√±ez Najar"
- Si ves "Magistrada ponente: Natalia √Ångel Cabo." ‚Üí magistrado_ponente: "Natalia √Ångel Cabo"
- Si ves "-Sala Plena-" ‚Üí sala_revision: "Sala Plena"
- Si ves "Expediente: D-15.479" ‚Üí expediente: "D-15.479"
- Si ves "Expediente: D-15.207." ‚Üí expediente: "D-15.207"
- Si ves l√≠neas m√∫ltiples como "Expediente:\n\nD-15.207." ‚Üí expediente: "D-15.207"

CR√çTICO: Responde √∫nicamente el JSON solicitado, sin comentarios adicionales.
`;
  }

  /**
   * Extraer texto usando regex (fallback para respuestas no JSON)
   */
  private extractFromText(text: string, regex: RegExp): string {
    const match = text.match(regex);
    return match ? match[1].trim() : 'No identificado';
  }

  /**
   * Verificar disponibilidad de servicios de IA
   */
  public getAvailableModels(): string[] {
    const models = [];
    if (this.openAiApiKey) models.push('openai');
    if (this.geminiApiKey) models.push('gemini');
    return models;
  }

  /**
   * Analizar m√∫ltiples documentos en lote (con l√≠mite de rate)
   */
  async analyzeBatch(
    documents: Array<{ id: string; content: string; title: string }>,
    model?: 'openai' | 'gemini'
  ): Promise<Array<{ id: string; analysis: DocumentAnalysis | null }>> {
    const results = [];
    
    logger.info(`üìä Iniciando an√°lisis en lote: ${documents.length} documentos`);

    for (let i = 0; i < documents.length; i++) {
      const doc = documents[i];
      
      logger.info(`üìÑ Procesando documento ${i + 1}/${documents.length}: ${doc.title}`);
      
      const analysis = await this.analyzeDocument(doc.content, doc.title, model);
      results.push({ id: doc.id, analysis });

      // Rate limiting: esperar entre an√°lisis
      if (i < documents.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 segundos entre llamadas
      }
    }

    logger.info(`‚úÖ An√°lisis en lote completado: ${results.filter(r => r.analysis).length}/${documents.length} exitosos`);

    return results;
  }

  /**
   * Detectar si el contenido es probablemente binario DOCX
   */
  private isLikelyDocxContent(content: string): boolean {
    // Verificar si contiene caracteres binarios t√≠picos de DOCX
    const binaryPattern = /[\x00-\x08\x0B\x0C\x0E-\x1F]/;
    const hasNullBytes = content.includes('\x00');
    const hasDocxSignature = content.includes('PK') && (content.includes('word/') || content.includes('document.xml'));
    const isVeryShort = content.length < 100;
    const hasHighBinaryRatio = (content.match(binaryPattern) || []).length / content.length > 0.1;

    return hasNullBytes || hasDocxSignature || (isVeryShort && hasHighBinaryRatio);
  }

  /**
   * Extraer texto de contenido DOCX binario
   */
  private async extractTextFromDocxContent(content: string, filename: string) {
    try {
      // Convertir string a buffer (asumiendo que es contenido binario)
      const buffer = Buffer.from(content, 'binary');
      
      // Verificar que sea realmente un archivo DOCX
      if (!DocumentTextExtractor.isDocxBuffer(buffer)) {
        logger.warn(`‚ö†Ô∏è  Contenido de ${filename} no parece ser DOCX v√°lido`);
        return null;
      }

      // Extraer texto usando el DocumentTextExtractor
      return await documentTextExtractor.extractFromBuffer(buffer, filename);
    } catch (error) {
      logger.error(`‚ùå Error extrayendo texto de ${filename}:`, error);
      return null;
    }
  }

  /**
   * Construir texto unificado a partir del contenido extra√≠do
   */
  private buildTextFromExtractedContent(extractedContent: any): string {
    const { structuredContent } = extractedContent;
    
    // Construir texto combinando las secciones estructuradas
    const sections = [];
    
    if (structuredContent.introduccion) {
      sections.push('=== INTRODUCCI√ìN ===\n' + structuredContent.introduccion);
    }
    
    if (structuredContent.considerandos) {
      sections.push('=== CONSIDERANDOS ===\n' + structuredContent.considerandos);
    }
    
    if (structuredContent.resuelve) {
      sections.push('=== RESUELVE ===\n' + structuredContent.resuelve);
    }
    
    if (structuredContent.otros && structuredContent.otros.length > 0) {
      sections.push('=== OTROS ELEMENTOS RELEVANTES ===\n' + structuredContent.otros.join('\n\n'));
    }
    
    return sections.join('\n\n');
  }

  /**
   * üéØ Extraer metadatos estructurales con regex (PRE-IA)
   * Funciona como sistema principal para campos estructurales espec√≠ficos
   */
  private extractMetadataWithRegex(content: string, documentTitle: string): Partial<DocumentAnalysis> {
    const metadata: Partial<DocumentAnalysis> = {};
    
    // 1. Magistrado Ponente
    const magistradoPatterns = [
      /(?:magistrado|magistrada)\s+ponente[:\s]*\n?\s*([^\n.,]+?)(?:[.,\n]|$)/im,
      /(?:magistrado|magistrada)\s+sustanciador[ao]?[:\s]*\n?\s*([^\n.,]+?)(?:[.,\n]|$)/im,
      /m\.p\.[\s:]*([^\n.,]+?)(?:[.,\n]|$)/im,
      // Mejorado: evitar "componente" y ser m√°s espec√≠fico
      /(?:^|\s)ponente[:\s]+([^\n.,]+?)(?:[.,\n]|$)/im
    ];
    
    for (const pattern of magistradoPatterns) {
      const match = content.match(pattern);
      if (match && match[1].trim().length > 2) {
        metadata.magistradoPonente = match[1].trim().replace(/\.$/, '');
        logger.info(`üîß Regex extrajo magistrado: "${metadata.magistradoPonente}"`);
        break;
      }
    }
    
    // 2. Expediente
    const expedientePatterns = [
      /expediente[:\s]*\n?\s*([A-Z]-[\d.]+)(?:\.|$)/im,
      /exp\.[\s:]*([A-Z]-[\d.]+)(?:\.|$)/im,
      /radicaci[o√≥]n[:\s]*([A-Z]-[\d.]+)(?:\.|$)/im
    ];
    
    for (const pattern of expedientePatterns) {
      const match = content.match(pattern);
      if (match) {
        metadata.expediente = match[1].trim().replace(/\.$/, ''); // Eliminar punto final
        logger.info(`üîß Regex extrajo expediente: "${metadata.expediente}"`);
        break;
      }
    }
    
    // 3. N√∫mero de Sentencia - PRIORIDAD: Extraer del t√≠tulo PRIMERO
    const sentenciaPatterns = [
      // Patrones para buscar en t√≠tulo y contenido
      /sentencia\s+([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im,
      /sentencia\s+(?:no\.?\s*|n√∫mero\s*)?([CT]-\d+(?:\s+de\s+|\s*\/\s*|\s*-\s*)\d{2,4})/im,
      /(?:^|\n)\s*([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})(?:\s|$)/im,
      // Patr√≥n directo para capturar formato est√°ndar
      /([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im
    ];

    // üéØ PASO 1: Buscar PRIMERO en el t√≠tulo del documento
    for (const pattern of sentenciaPatterns) {
      const titleMatch = documentTitle.match(pattern);
      
      if (titleMatch) {
        // Normalizar formato: C-223 DE 2025 ‚Üí C-223/25
        const numeroNormalizado = titleMatch[1].toUpperCase()
          .replace(/\s+DE\s+/, '/').replace(/\s*-\s*/, '/').replace(/\s/g, '');
        
        // Validar a√±o
        const yearMatch = numeroNormalizado.match(/\/(\d{2,4})$/);
        if (yearMatch) {
          const year = parseInt(yearMatch[1]);
          const fullYear = year < 100 ? (year < 50 ? 2000 + year : 1900 + year) : year;
          
          if (fullYear >= 2020) {
            metadata.numeroSentencia = numeroNormalizado;
            logger.info(`‚úÖ Regex extrajo n√∫mero del T√çTULO: "${metadata.numeroSentencia}" (a√±o v√°lido: ${fullYear})`);
            break;
          }
        } else {
          metadata.numeroSentencia = numeroNormalizado;
          logger.info(`‚úÖ Regex extrajo n√∫mero del T√çTULO: "${metadata.numeroSentencia}"`);
          break;
        }
      }
    }
    
    // üéØ PASO 2: Solo si no se encontr√≥ en el t√≠tulo, buscar en el contenido (con m√°s restricciones)
    if (!metadata.numeroSentencia) {
      const restrictivePatterns = [
        // Patrones muy espec√≠ficos para evitar referencias cruzadas
        /sentencia\s+([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im,
        /(?:^|\n)\s*([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})(?:\s|$)/im
      ];
      
      for (const pattern of restrictivePatterns) {
        const match = content.match(pattern);
        
        if (match) {
          const numeroNormalizado = match[1].toUpperCase()
            .replace(/\s+DE\s+/, '/').replace(/\s*-\s*/, '/').replace(/\s/g, '');
          
          // Para contenido, ser m√°s restrictivo con a√±os (solo 2023-2025)
          const yearMatch = numeroNormalizado.match(/\/(\d{2,4})$/);
          if (yearMatch) {
            const year = parseInt(yearMatch[1]);
            const fullYear = year < 100 ? (year < 50 ? 2000 + year : 1900 + year) : year;
            
            if (fullYear >= 2023) {
              metadata.numeroSentencia = numeroNormalizado;
              logger.info(`‚ö†Ô∏è Regex extrajo n√∫mero del CONTENIDO (fallback): "${metadata.numeroSentencia}" (a√±o v√°lido: ${fullYear})`);
              break;
            } else {
              logger.info(`üîß Regex descart√≥ n√∫mero del contenido: "${numeroNormalizado}" (a√±o muy antiguo: ${fullYear})`);
            }
          }
        }
      }
    }
    
    // 4. Sala de Revisi√≥n
    const salaPatterns = [
      /\b(sala\s+plena)\b/im,
      /\b(sala\s+primera)\b/im,
      /\b(sala\s+segunda)\b/im,
      /\b(sala\s+tercera)\b/im,
      /-\s*(sala\s+(?:plena|primera|segunda|tercera))\s*-/im
    ];
    
    for (const pattern of salaPatterns) {
      const match = content.match(pattern);
      if (match) {
        metadata.salaRevision = match[1].replace(/\b\w/g, l => l.toUpperCase()); // Title Case
        logger.info(`üîß Regex extrajo sala: "${metadata.salaRevision}"`);
        break;
      }
    }
    
    return metadata;
  }

  /**
   * üéØ Combinar metadatos regex (prioritarios) + IA (complementarios)
   */
  private combineMetadata(regexData: Partial<DocumentAnalysis>, aiData: DocumentAnalysis): DocumentAnalysis {
    // Los metadatos de regex tienen prioridad para campos estructurales
    return {
      ...aiData, // Base de IA (tema, resumen, decisi√≥n)
      // Campos estructurales: regex tiene prioridad
      numeroSentencia: regexData.numeroSentencia || aiData.numeroSentencia,
      magistradoPonente: regexData.magistradoPonente || aiData.magistradoPonente,
      salaRevision: regexData.salaRevision || aiData.salaRevision,
      expediente: regexData.expediente || aiData.expediente,
      // Marcar que se us√≥ sistema h√≠brido
      modeloUsado: aiData.modeloUsado + (
        (regexData.magistradoPonente || regexData.expediente || regexData.numeroSentencia)
          ? ' + regex-extractor'
          : ''
      )
    };
  }

  /**
   * Analizar documento desde archivo f√≠sico DOCX
   */
  async analyzeDocumentFromFile(
    filePath: string,
    documentTitle: string,
    model?: 'openai' | 'gemini'
  ): Promise<DocumentAnalysis | null> {
    try {
      logger.info(`üìÅ Analizando documento desde archivo: ${filePath}`);

      // Verificar si es archivo DOCX
      if (!DocumentTextExtractor.isDocxFile(filePath)) {
        logger.warn(`‚ö†Ô∏è  ${filePath} no parece ser un archivo DOCX v√°lido`);
        
        // Intentar leer como texto plano
        const textContent = fs.readFileSync(filePath, 'utf8');
        return await this.analyzeDocument(textContent, documentTitle, model);
      }

      // Extraer texto del archivo DOCX
      const extractedContent = await documentTextExtractor.extractFromDocxFile(filePath);
      
      if (!extractedContent) {
        logger.error(`‚ùå No se pudo extraer contenido de ${filePath}`);
        return null;
      }

      // Construir texto para an√°lisis
      const textContent = this.buildTextFromExtractedContent(extractedContent);
      
      // Realizar an√°lisis de IA
      const analysis = await this.analyzeDocument(textContent, documentTitle, model);
      
      if (analysis) {
        // Agregar metadata de extracci√≥n
        analysis.fragmentosAnalizados = [
          `Extra√≠do con ${extractedContent.metadata.extractionMethod}`,
          `${extractedContent.metadata.wordCount} palabras`,
          `Estructura: ${extractedContent.metadata.hasStructure ? 'Detectada' : 'No detectada'}`
        ];
      }

      return analysis;

    } catch (error) {
      logger.error(`‚ùå Error analizando archivo ${filePath}:`, error);
      return null;
    }
  }
}

// Instancia singleton del servicio
export const aiAnalysisService = new AiAnalysisService();