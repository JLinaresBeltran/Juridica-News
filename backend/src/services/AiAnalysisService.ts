/**
 * Servicio de An√°lisis de IA para Sentencias Judiciales
 * Integra OpenAI GPT-4 Mini y Google Gemini para an√°lisis autom√°tico
 */

import { logger } from '@/utils/logger';

// Interfaces para el an√°lisis
interface DocumentAnalysis {
  temaPrincipal: string;
  resumenIA: string;
  decision: string;
  numeroSentencia?: string;
  magistradoPonente?: string;
  salaRevision?: string;
  expediente?: string;
  fragmentosAnalizados: string[];
  modeloUsado: string;
  confidencia: number;
}

interface FragmentSelection {
  introduccion: string;
  considerandos: string;
  resuelve: string;
  otros: string[];
}

export class AiAnalysisService {
  private openAiApiKey?: string;
  private geminiApiKey?: string;
  private defaultModel: 'openai' | 'gemini' = 'openai';

  constructor() {
    this.openAiApiKey = process.env.OPENAI_API_KEY;
    this.geminiApiKey = process.env.GEMINI_API_KEY;

    if (!this.openAiApiKey && !this.geminiApiKey) {
      logger.warn('‚ö†Ô∏è  No se encontraron API keys para servicios de IA');
    }

    // Determinar modelo por defecto
    if (this.openAiApiKey) {
      this.defaultModel = 'openai';
    } else if (this.geminiApiKey) {
      this.defaultModel = 'gemini';
    }

    logger.info(`ü§ñ AiAnalysisService iniciado - Modelo por defecto: ${this.defaultModel}`);
  }

  /**
   * Analizar documento completo con IA
   */
  async analyzeDocument(
    documentContent: string,
    documentTitle: string,
    model?: 'openai' | 'gemini'
  ): Promise<DocumentAnalysis | null> {
    try {
      const modelToUse = model || this.defaultModel;
      
      logger.info(`üîç Iniciando an√°lisis de IA: "${documentTitle}" con ${modelToUse}`);

      // 1. Seleccionar fragmentos clave
      const fragments = await this.selectKeyFragments(documentContent);
      
      if (!fragments) {
        logger.error('‚ùå No se pudieron extraer fragmentos del documento');
        return null;
      }

      // 2. Realizar an√°lisis con el modelo seleccionado
      let analysis: DocumentAnalysis | null = null;
      
      if (modelToUse === 'openai' && this.openAiApiKey) {
        analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
      } else if (modelToUse === 'gemini' && this.geminiApiKey) {
        analysis = await this.analyzeWithGemini(fragments, documentTitle);
      }

      if (!analysis) {
        // Intentar con el otro modelo como fallback
        const fallbackModel = modelToUse === 'openai' ? 'gemini' : 'openai';
        logger.info(`üîÑ Intentando con modelo de respaldo: ${fallbackModel}`);
        
        if (fallbackModel === 'openai' && this.openAiApiKey) {
          analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
        } else if (fallbackModel === 'gemini' && this.geminiApiKey) {
          analysis = await this.analyzeWithGemini(fragments, documentTitle);
        }
      }

      if (analysis) {
        logger.info(`‚úÖ An√°lisis completado exitosamente con ${analysis.modeloUsado}`);
      }

      return analysis;

    } catch (error) {
      logger.error(`‚ùå Error en an√°lisis de IA: ${error}`);
      return null;
    }
  }

  /**
   * Seleccionar fragmentos clave del documento para an√°lisis optimizado
   */
  private async selectKeyFragments(content: string): Promise<FragmentSelection | null> {
    try {
      const normalizedContent = content.toLowerCase();

      // Patrones para identificar secciones importantes
      const patterns = {
        introduccion: /(?:en\s+la\s+ciudad\s+de|la\s+corte\s+constitucional|sala\s+plena|magistrado\s+ponente|expediente)/i,
        antecedentes: /(?:antecedentes|i\.\s*antecedentes|1\.\s*antecedentes)/i,
        considerandos: /(?:consideraciones|considerandos|ii\.\s*consideraciones|2\.\s*consideraciones|fundamentos\s+jur√≠dicos)/i,
        resuelve: /(?:resuelve|decide|falla|iii\.\s*decisi√≥n|3\.\s*decisi√≥n)/i,
        ratioDecidendi: /(?:ratio\s+decidendi|fundamento\s+central|tesis\s+principal)/i
      };

      const fragments: FragmentSelection = {
        introduccion: '',
        considerandos: '',
        resuelve: '',
        otros: []
      };

      // Dividir el contenido en p√°rrafos
      const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 50);

      let introduccionFound = false;
      let considerandosFound = false;
      let resuelveFound = false;

      for (const paragraph of paragraphs) {
        const paragraphLower = paragraph.toLowerCase();

        // Buscar introducci√≥n (primeros p√°rrafos relevantes)
        if (!introduccionFound && patterns.introduccion.test(paragraphLower)) {
          fragments.introduccion += paragraph + '\n\n';
          if (fragments.introduccion.length > 1500) introduccionFound = true;
        }

        // Buscar considerandos (parte central de la sentencia)
        if (!considerandosFound && patterns.considerandos.test(paragraphLower)) {
          considerandosFound = true;
        }
        
        if (considerandosFound && !resuelveFound) {
          fragments.considerandos += paragraph + '\n\n';
          if (fragments.considerandos.length > 3000) considerandosFound = false; // Limitar tama√±o
        }

        // Buscar parte resolutiva
        if (!resuelveFound && patterns.resuelve.test(paragraphLower)) {
          resuelveFound = true;
        }

        if (resuelveFound) {
          fragments.resuelve += paragraph + '\n\n';
          if (fragments.resuelve.length > 1000) break; // Limitar la parte resolutiva
        }

        // Capturar otros fragmentos relevantes
        if (patterns.ratioDecidendi.test(paragraphLower) && paragraph.length > 100) {
          fragments.otros.push(paragraph);
        }
      }

      // Validar que se extrajeron fragmentos m√≠nimos
      const totalContent = fragments.introduccion + fragments.considerandos + fragments.resuelve;
      if (totalContent.length < 500) {
        logger.warn('‚ö†Ô∏è  Fragmentos extra√≠dos muy cortos, usando contenido completo truncado');
        
        // Fallback: usar primeros y √∫ltimos p√°rrafos
        const firstPart = paragraphs.slice(0, 5).join('\n\n');
        const lastPart = paragraphs.slice(-3).join('\n\n');
        
        fragments.introduccion = firstPart.substring(0, 1500);
        fragments.resuelve = lastPart.substring(0, 1000);
        fragments.considerandos = content.substring(1500, 4000);
      }

      logger.info(`üìÑ Fragmentos extra√≠dos: ${fragments.introduccion.length + fragments.considerandos.length + fragments.resuelve.length} caracteres`);

      return fragments;

    } catch (error) {
      logger.error(`‚ùå Error seleccionando fragmentos: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con OpenAI GPT-4 Mini
   */
  private async analyzeWithOpenAI(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const OpenAI = (await import('openai')).default;
      const openai = new OpenAI({
        apiKey: this.openAiApiKey
      });

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      logger.info('üîç Enviando an√°lisis a OpenAI GPT-4 Mini...');

      const response = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Eres un experto jurista especializado en an√°lisis de sentencias judiciales colombianas. 
                     Tu tarea es analizar sentencias de la Corte Constitucional y extraer informaci√≥n clave.
                     Responde siempre en espa√±ol y mant√©n un tono profesional y preciso.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.3, // Baja temperatura para respuestas m√°s consistentes
        response_format: { type: "json_object" }
      });

      const result = response.choices[0]?.message?.content;
      
      if (!result) {
        logger.error('‚ùå OpenAI no devolvi√≥ respuesta');
        return null;
      }

      const parsedResult = JSON.parse(result);

      // Funci√≥n helper para limpiar respuestas "no disponible" 
      const cleanField = (value: string | null | undefined): string | null => {
        if (!value || value.toLowerCase().includes('no disponible') || 
            value.toLowerCase().includes('no identificado') ||
            value.toLowerCase().includes('no especificado') ||
            value.toLowerCase().includes('no se encuentra') ||
            value.trim().length < 3) {
          return null;
        }
        return value.trim();
      };

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: cleanField(parsedResult.numero_sentencia),
        magistradoPonente: cleanField(parsedResult.magistrado_ponente),
        salaRevision: cleanField(parsedResult.sala_revision),
        expediente: cleanField(parsedResult.expediente),
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gpt-4o-mini',
        confidencia: parsedResult.confidencia || 0.8
      };

    } catch (error) {
      logger.error(`‚ùå Error con OpenAI: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con Google Gemini
   */
  private async analyzeWithGemini(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const { GoogleGenerativeAI } = await import('@google/generative-ai');
      const genAI = new GoogleGenerativeAI(this.geminiApiKey!);
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      logger.info('üîç Enviando an√°lisis a Google Gemini...');

      const result = await model.generateContent([prompt]);
      const response = await result.response;
      const text = response.text();

      if (!text) {
        logger.error('‚ùå Gemini no devolvi√≥ respuesta');
        return null;
      }

      // Intentar parsear como JSON
      let parsedResult;
      try {
        // Limpiar la respuesta por si tiene caracteres extra
        const cleanedText = text.replace(/```json\s*|\s*```/g, '').trim();
        parsedResult = JSON.parse(cleanedText);
      } catch (parseError) {
        logger.warn('‚ö†Ô∏è  Respuesta de Gemini no es JSON v√°lido, parseando manualmente');
        
        // Fallback parsing manual
        parsedResult = {
          tema_principal: this.extractFromText(text, /tema principal:?\s*([^\n]+)/i),
          resumen: this.extractFromText(text, /resumen:?\s*([^\n]+)/i),
          decision: this.extractFromText(text, /decisi√≥n:?\s*([^\n]+)/i),
          numero_sentencia: this.extractFromText(text, /n√∫mero.*sentencia:?\s*([^\n]+)/i),
          magistrado_ponente: this.extractFromText(text, /magistrado.*ponente:?\s*([^\n]+)/i),
          sala_revision: this.extractFromText(text, /sala.*revisi√≥n:?\s*([^\n]+)/i),
          expediente: this.extractFromText(text, /expediente:?\s*([^\n]+)/i),
          confidencia: 0.7
        };
      }

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: parsedResult.numero_sentencia || null,
        magistradoPonente: parsedResult.magistrado_ponente || null,
        salaRevision: parsedResult.sala_revision || null,
        expediente: parsedResult.expediente || null,
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gemini-1.5-flash',
        confidencia: parsedResult.confidencia || 0.7
      };

    } catch (error) {
      logger.error(`‚ùå Error con Gemini: ${error}`);
      return null;
    }
  }

  /**
   * Construir prompt de an√°lisis optimizado
   */
  private buildAnalysisPrompt(fragments: FragmentSelection, documentTitle: string): string {
    return `
Analiza la siguiente sentencia judicial y extrae la informaci√≥n solicitada. Responde en formato JSON v√°lido.

**T√≠tulo del documento**: ${documentTitle}

**Fragmentos clave de la sentencia**:

**INTRODUCCI√ìN Y DATOS B√ÅSICOS**:
${fragments.introduccion}

**CONSIDERACIONES Y FUNDAMENTOS**:
${fragments.considerandos}

**PARTE RESOLUTIVA**:
${fragments.resuelve}

**INSTRUCCIONES**:
1. Identifica el TEMA PRINCIPAL de la sentencia (materia jur√≠dica central)
2. Redacta un RESUMEN conciso de m√°ximo 200 palabras
3. Identifica la DECISI√ìN final del tribunal (estimatoria, desestimatoria, etc.)
4. Extrae INFORMACI√ìN ESTRUCTURAL espec√≠fica:
   - N√öMERO DE SENTENCIA: Busca patrones como "T-123/24", "C-456/25", etc.
   - MAGISTRADO PONENTE: Busca "Magistrado Ponente:", "M.P.:" o nombres despu√©s de estos t√©rminos
   - SALA DE REVISI√ìN: Busca "Sala Primera", "Sala Segunda", "Sala Plena", etc.
   - EXPEDIENTE: Busca "Expediente", "Exp.", n√∫meros de radicaci√≥n
5. Si NO encuentras un campo espec√≠fico, responde con null (no con texto explicativo)
6. Asigna un nivel de CONFIDENCIA del an√°lisis (0.1 a 1.0)

**FORMATO DE RESPUESTA** (JSON):
{
  "tema_principal": "Tema o materia principal de la sentencia",
  "resumen": "Resumen conciso de los hechos, argumentos y conclusiones",
  "decision": "Decisi√≥n final del tribunal con el sentido del fallo",
  "numero_sentencia": "T-353/25 (o null si no se encuentra)",
  "magistrado_ponente": "Dr. Juan Carlos Henao P√©rez (o null si no se encuentra)",
  "sala_revision": "Sala Segunda de Revisi√≥n (o null si no se encuentra)",
  "expediente": "T-1234567 (o null si no se encuentra)",
  "confidencia": 0.8
}

IMPORTANTE: Si no encuentras informaci√≥n espec√≠fica, usa null en lugar de texto explicativo.

Importante: Responde √∫nicamente el JSON solicitado, sin comentarios adicionales.
`;
  }

  /**
   * Extraer texto usando regex (fallback para respuestas no JSON)
   */
  private extractFromText(text: string, regex: RegExp): string {
    const match = text.match(regex);
    return match ? match[1].trim() : 'No identificado';
  }

  /**
   * Verificar disponibilidad de servicios de IA
   */
  public getAvailableModels(): string[] {
    const models = [];
    if (this.openAiApiKey) models.push('openai');
    if (this.geminiApiKey) models.push('gemini');
    return models;
  }

  /**
   * Analizar m√∫ltiples documentos en lote (con l√≠mite de rate)
   */
  async analyzeBatch(
    documents: Array<{ id: string; content: string; title: string }>,
    model?: 'openai' | 'gemini'
  ): Promise<Array<{ id: string; analysis: DocumentAnalysis | null }>> {
    const results = [];
    
    logger.info(`üìä Iniciando an√°lisis en lote: ${documents.length} documentos`);

    for (let i = 0; i < documents.length; i++) {
      const doc = documents[i];
      
      logger.info(`üìÑ Procesando documento ${i + 1}/${documents.length}: ${doc.title}`);
      
      const analysis = await this.analyzeDocument(doc.content, doc.title, model);
      results.push({ id: doc.id, analysis });

      // Rate limiting: esperar entre an√°lisis
      if (i < documents.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 segundos entre llamadas
      }
    }

    logger.info(`‚úÖ An√°lisis en lote completado: ${results.filter(r => r.analysis).length}/${documents.length} exitosos`);

    return results;
  }
}

// Instancia singleton del servicio
export const aiAnalysisService = new AiAnalysisService();