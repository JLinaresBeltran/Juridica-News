/**
 * Servicio de An√°lisis de IA para Sentencias Judiciales
 * Integra OpenAI GPT-4 Mini y Google Gemini para an√°lisis autom√°tico
 */

import { logger } from '@/utils/logger';
import { documentTextExtractor, DocumentTextExtractor } from '@/services/DocumentTextExtractor';
import * as fs from 'fs';
import * as path from 'path';

// Interfaces para el an√°lisis
interface DocumentAnalysis {
  temaPrincipal: string;
  resumenIA: string;
  decision: string;
  numeroSentencia?: string;
  magistradoPonente?: string;
  salaRevision?: string;
  expediente?: string;
  fragmentosAnalizados: string[];
  modeloUsado: string;
  confidencia: number;
}

interface FragmentSelection {
  introduccion: string;
  considerandos: string;
  resuelve: string;
  otros: string[];
}

export class AiAnalysisService {
  private openAiApiKey?: string;
  private geminiApiKey?: string;
  private defaultModel: 'openai' | 'gemini' = 'openai';
  private openAiClient?: any; // Instancia singleton del cliente OpenAI
  private analysisQueue: Array<() => Promise<void>> = []; // Cola de an√°lisis pendientes
  private isProcessingQueue: boolean = false; // Flag para evitar procesamiento concurrente

  constructor() {
    this.openAiApiKey = process.env.OPENAI_API_KEY;
    this.geminiApiKey = process.env.GEMINI_API_KEY;

    if (!this.openAiApiKey && !this.geminiApiKey) {
      logger.warn('‚ö†Ô∏è  No se encontraron API keys para servicios de IA');
    }

    // Determinar modelo por defecto
    if (this.openAiApiKey) {
      this.defaultModel = 'openai';
    } else if (this.geminiApiKey) {
      this.defaultModel = 'gemini';
    }

    logger.info(`ü§ñ AiAnalysisService iniciado - Modelo por defecto: ${this.defaultModel}`);
  }

  /**
   * Obtener instancia singleton del cliente OpenAI
   */
  private async getOpenAIClient() {
    if (!this.openAiClient && this.openAiApiKey) {
      try {
        const OpenAI = (await import('openai')).default;
        this.openAiClient = new OpenAI({
          apiKey: this.openAiApiKey,
          timeout: 120000, // 2 minutos de timeout
          maxRetries: 2, // M√°ximo 2 reintentos
        });
        logger.info('‚úÖ Cliente OpenAI singleton creado exitosamente');
      } catch (error) {
        logger.error('‚ùå Error creando cliente OpenAI:', error);
        throw error;
      }
    }
    return this.openAiClient;
  }

  /**
   * Procesar cola de an√°lisis secuencialmente
   */
  private async processAnalysisQueue(): Promise<void> {
    if (this.isProcessingQueue || this.analysisQueue.length === 0) {
      return;
    }

    this.isProcessingQueue = true;
    logger.info(`üìã Procesando cola de an√°lisis: ${this.analysisQueue.length} elementos pendientes`);

    while (this.analysisQueue.length > 0) {
      const task = this.analysisQueue.shift();
      if (task) {
        try {
          await task();
          // Esperar 2 segundos entre an√°lisis para respetar rate limits
          if (this.analysisQueue.length > 0) {
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        } catch (error) {
          logger.error('‚ùå Error procesando tarea de an√°lisis en cola:', error);
        }
      }
    }

    this.isProcessingQueue = false;
    logger.info('‚úÖ Cola de an√°lisis completada');
  }

  /**
   * Encolar an√°lisis para procesamiento secuencial
   */
  private enqueueAnalysis(task: () => Promise<void>): void {
    this.analysisQueue.push(task);
    logger.info(`üìã Tarea encolada. Cola actual: ${this.analysisQueue.length} elementos. Procesando: ${this.isProcessingQueue}`);
    
    // Iniciar procesamiento de cola si no est√° en curso
    if (!this.isProcessingQueue) {
      logger.info(`üöÄ Iniciando procesamiento de cola autom√°ticamente`);
      setTimeout(() => {
        this.processAnalysisQueue().catch(error => {
          logger.error('‚ùå Error procesando cola autom√°ticamente:', error);
        });
      }, 100);
    }
  }

  /**
   * Analizar documento completo con IA
   * NOTA: documentContent ahora contiene resumen inteligente optimizado para IA (‚â§10K caracteres)
   * generado por ScrapingOrchestrator usando DocumentTextExtractor
   */
  async analyzeDocument(
    documentContent: string,
    documentTitle: string,
    model?: 'openai' | 'gemini'
  ): Promise<DocumentAnalysis | null> {
    try {
      const modelToUse = model || this.defaultModel;

      logger.info(`üîç Iniciando an√°lisis de IA: "${documentTitle}" con ${modelToUse}`);
      logger.info(`üîç DEBUG 1: Preparando contenido para an√°lisis...`);

      // 1. Preparar contenido para an√°lisis
      let processedContent = documentContent;
      let extractedContent: any = null; // Mantener referencia al contenido extra√≠do
      logger.info(`üîç DEBUG 2: Contenido procesado, longitud: ${processedContent.length} caracteres`);

      // Verificar si es contenido binario DOCX y extraer texto
      if (this.isLikelyDocxContent(documentContent)) {
        logger.info('üìÑ Detectado contenido DOCX binario, extrayendo texto...');

        extractedContent = await this.extractTextFromDocxContent(documentContent, documentTitle);
        if (extractedContent) {
          processedContent = this.buildTextFromExtractedContent(extractedContent);
          logger.info(`‚úÖ Texto extra√≠do exitosamente: ${processedContent.length} caracteres`);
          logger.info(`üîç DEBUG: Secciones extra√≠das - Intro: ${extractedContent.structuredContent.introduccion.length}ch, Considerandos: ${extractedContent.structuredContent.considerandos.length}ch, Resuelve: ${extractedContent.structuredContent.resuelve.length}ch`);
        } else {
          logger.error('‚ùå No se pudo extraer texto del contenido DOCX');
          return null;
        }
      }

      // üéØ STEP 1: Extraer metadatos estructurales con regex (pre-IA) - CON TIMEOUT
      logger.info(`üîç DEBUG: Iniciando extracci√≥n regex...`);
      let regexMetadata: Partial<DocumentAnalysis> = {};

      try {
        // Ejecutar con timeout de 10 segundos
        const regexPromise = new Promise<Partial<DocumentAnalysis>>((resolve) => {
          const result = this.extractMetadataWithRegex(processedContent, documentTitle);
          resolve(result);
        });

        const timeoutPromise = new Promise<Partial<DocumentAnalysis>>((_, reject) => {
          setTimeout(() => reject(new Error('Timeout en extracci√≥n regex')), 10000);
        });

        regexMetadata = await Promise.race([regexPromise, timeoutPromise]);

      } catch (error) {
        logger.error(`‚ùå Error/Timeout en extracci√≥n regex: ${error}`);
        regexMetadata = {}; // Continuar con metadatos vac√≠os
      }

      logger.info(`üìä Metadatos regex extra√≠dos: Magistrado: ${regexMetadata.magistradoPonente || 'N/A'}, Expediente: ${regexMetadata.expediente || 'N/A'}, Sentencia: ${regexMetadata.numeroSentencia || 'N/A'}`);

      // 2. Seleccionar fragmentos clave - NUEVA L√ìGICA
      logger.info(`üîç DEBUG 3: Seleccionando fragmentos clave...`);
      let fragments: FragmentSelection | null = null;

      // üéØ CORRECCI√ìN: Si tenemos extracci√≥n exitosa con DocumentTextExtractor, usar directamente esas secciones
      if (extractedContent && extractedContent.structuredContent) {
        logger.info(`‚úÖ Usando secciones ya extra√≠das por DocumentTextExtractor (incluye RESUELVE completo)`);
        fragments = {
          introduccion: extractedContent.structuredContent.introduccion || '',
          considerandos: extractedContent.structuredContent.considerandos || '',
          resuelve: extractedContent.structuredContent.resuelve || '',
          otros: extractedContent.structuredContent.otros || []
        };
        logger.info(`üîç RESUELVE directo del DocumentTextExtractor: ${fragments.resuelve.length} caracteres`);
      } else {
        // Solo usar selectKeyFragments() como fallback para contenido sin extracci√≥n previa
        logger.info(`üìÑ Fallback: usando selectKeyFragments() para contenido sin extracci√≥n previa`);
        fragments = await this.selectKeyFragments(processedContent);
      }

      if (!fragments) {
        logger.error('‚ùå No se pudieron extraer fragmentos del documento');
        return null;
      }
      logger.info(`üîç DEBUG 4: Fragmentos seleccionados exitosamente`);
      logger.info(`üìã Fragmentos finales - Intro: ${fragments.introduccion.length}ch, Considerandos: ${fragments.considerandos.length}ch, Resuelve: ${fragments.resuelve.length}ch`);

      // 2. Realizar an√°lisis con el modelo seleccionado
      logger.info(`üîç DEBUG 5: Iniciando an√°lisis con modelo: ${modelToUse}`);
      let analysis: DocumentAnalysis | null = null;
      
      if (modelToUse === 'openai' && this.openAiApiKey) {
        logger.info(`üîç DEBUG 6: Llamando analyzeWithOpenAI...`);
        analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
        logger.info(`üîç DEBUG 7: analyzeWithOpenAI completado`);
      } else if (modelToUse === 'gemini' && this.geminiApiKey) {
        logger.info(`üîç DEBUG 6: Llamando analyzeWithGemini...`);
        analysis = await this.analyzeWithGemini(fragments, documentTitle);
        logger.info(`üîç DEBUG 7: analyzeWithGemini completado`);
      }

      if (!analysis) {
        // Intentar con el otro modelo como fallback
        const fallbackModel = modelToUse === 'openai' ? 'gemini' : 'openai';
        logger.info(`üîÑ Intentando con modelo de respaldo: ${fallbackModel}`);
        
        if (fallbackModel === 'openai' && this.openAiApiKey) {
          analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
        } else if (fallbackModel === 'gemini' && this.geminiApiKey) {
          analysis = await this.analyzeWithGemini(fragments, documentTitle);
        }
      }

      if (analysis) {
        logger.info(`‚úÖ An√°lisis completado exitosamente con ${analysis.modeloUsado}`);
        
        // üéØ STEP 2: Combinar metadatos regex + IA (regex tiene prioridad para campos estructurales)
        analysis = this.combineMetadata(regexMetadata, analysis);
        
        logger.info(`üîç Metadatos finales: Magistrado: ${analysis.magistradoPonente || 'N/A'}, Sala: ${analysis.salaRevision || 'N/A'}, Expediente: ${analysis.expediente || 'N/A'}`);
      }

      return analysis;

    } catch (error) {
      logger.error(`‚ùå Error en an√°lisis de IA: ${error}`);
      return null;
    }
  }

  /**
   * Seleccionar fragmentos clave del documento para an√°lisis optimizado
   */
  private async selectKeyFragments(content: string): Promise<FragmentSelection | null> {
    try {
      logger.info(`üîç DEBUG selectKeyFragments: Inicio del m√©todo`);
      const normalizedContent = content.toLowerCase();
      logger.info(`üîç DEBUG selectKeyFragments: Contenido normalizado, longitud: ${normalizedContent.length}`);

      // Patrones para identificar secciones importantes
      const patterns = {
        // Encabezado con informaci√≥n estructural
        encabezado: /(?:rep√∫blica\s+de\s+colombia|corte\s+constitucional|sentencia\s+[tc]-\d|expediente|(?:magistrado|magistrada)\s+ponente)/i,
        introduccion: /(?:en\s+la\s+ciudad\s+de|la\s+corte\s+constitucional|sala\s+plena)/i,
        antecedentes: /(?:antecedentes|i\.\s*antecedentes|1\.\s*antecedentes)/i,
        considerandos: /(?:consideraciones|considerandos|ii\.\s*consideraciones|2\.\s*consideraciones|fundamentos\s+jur√≠dicos)/i,
        resuelve: /(?:^[\s]*(?:(?:III|3)\.?\s*)?RESUELVE\s*[:\.]?[\s]*$|^[\s]*RESUELVE\s*[:\.]?[\s]*$|resuelve|decide|falla|iii\.\s*decisi√≥n|3\.\s*decisi√≥n)/im,
        ratioDecidendi: /(?:ratio\s+decidendi|fundamento\s+central|tesis\s+principal)/i
      };

      const fragments: FragmentSelection = {
        introduccion: '',
        considerandos: '',
        resuelve: '',
        otros: []
      };

      // Dividir el contenido en l√≠neas para capturar mejor el encabezado
      logger.info(`üîç DEBUG selectKeyFragments: Dividiendo contenido en l√≠neas...`);
      const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      logger.info(`üîç DEBUG selectKeyFragments: ${lines.length} l√≠neas procesadas`);
      const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 20);
      logger.info(`üîç DEBUG selectKeyFragments: ${paragraphs.length} p√°rrafos procesados`);

      // 1. PRIORIDAD: Capturar encabezado con datos estructurales
      const header = [];
      for (let i = 0; i < Math.min(lines.length, 30); i++) {
        const line = lines[i];
        if (line.length > 3) { // Evitar l√≠neas muy cortas
          header.push(line);
        }
        if (header.length >= 20) break; // Limitar el encabezado
      }
      
      // El encabezado siempre debe incluirse en introducci√≥n
      fragments.introduccion = header.join('\n') + '\n\n';

      // 2. Buscar secciones adicionales
      logger.info(`üîç DEBUG selectKeyFragments: Iniciando b√∫squeda de secciones en ${paragraphs.length} p√°rrafos`);
      let considerandosFound = false;
      let resuelveFound = false;

      for (const paragraph of paragraphs) {
        const paragraphLower = paragraph.toLowerCase();

        // Agregar m√°s contenido de introducci√≥n si es relevante
        if (fragments.introduccion.length < 2000 && patterns.introduccion.test(paragraphLower)) {
          fragments.introduccion += paragraph + '\n\n';
        }

        // Buscar considerandos (parte central de la sentencia)
        if (!considerandosFound && patterns.considerandos.test(paragraphLower)) {
          considerandosFound = true;
        }
        
        if (considerandosFound && !resuelveFound && fragments.considerandos.length < 3000) {
          fragments.considerandos += paragraph + '\n\n';
        }

        // Buscar parte resolutiva - MEJORADO para capturar RESUELVE completo
        if (!resuelveFound && patterns.resuelve.test(paragraphLower)) {
          resuelveFound = true;
        }

        // CAMBIO CR√çTICO: Capturar TODA la secci√≥n RESUELVE sin l√≠mite de 1000 caracteres
        if (resuelveFound) {
          fragments.resuelve += paragraph + '\n\n';
        }

        // Capturar otros fragmentos relevantes
        if (patterns.ratioDecidendi.test(paragraphLower) && paragraph.length > 100) {
          fragments.otros.push(paragraph);
        }
      }

      // 3. Validar y aplicar fallback si es necesario
      if (fragments.considerandos.length < 500) {
        logger.warn('‚ö†Ô∏è  Pocos considerandos encontrados, usando contenido central');
        const middleStart = Math.floor(content.length * 0.3);
        const middleEnd = Math.floor(content.length * 0.7);
        fragments.considerandos = content.substring(middleStart, middleEnd);
      }

      if (fragments.resuelve.length < 200) {
        logger.warn('‚ö†Ô∏è  Parte resolutiva corta, usando contenido final completo');
        // CAMBIO: Buscar "RESUELVE" en √∫ltimas p√°ginas del documento completo
        const finalPortion = paragraphs.slice(-10); // √öltimos 10 p√°rrafos
        let resuelveContent = '';
        let foundResuelveTitle = false;

        for (const p of finalPortion) {
          // Buscar el t√≠tulo "RESUELVE" con cualquier puntuaci√≥n (:", "." o sin puntos)
          if (/^[\s]*RESUELVE\s*[:\.]?[\s]*$/i.test(p.trim())) {
            foundResuelveTitle = true;
          }

          if (foundResuelveTitle) {
            resuelveContent += p + '\n\n';
          }
        }

        // Si encontr√≥ "RESUELVE", usar ese contenido, sino usar parte final completa
        fragments.resuelve = resuelveContent || finalPortion.join('\n\n');
      }

      logger.info(`üìÑ Fragmentos extra√≠dos: ${fragments.introduccion.length + fragments.considerandos.length + fragments.resuelve.length} caracteres`);
      logger.info(`üìã RESUELVE extra√≠do: ${fragments.resuelve.length} caracteres - Contenido: ${fragments.resuelve.substring(0, 100)}...`);

      // DEBUG EXTRA: Si RESUELVE est√° vac√≠o, verificar por qu√©
      if (fragments.resuelve.length === 0) {
        logger.warn(`‚ùå DEBUG AiAnalysis: RESUELVE vac√≠o. Resuelve encontrado: ${resuelveFound}`);
        logger.info(`üîç DEBUG: Buscando "resuelve" manualmente en contenido de ${content.length} caracteres`);

        const manualFind = content.toLowerCase().indexOf('resuelve');
        if (manualFind !== -1) {
          const contextStart = Math.max(0, manualFind - 100);
          const contextEnd = Math.min(content.length, manualFind + 300);
          logger.info(`üîç DEBUG: "resuelve" encontrado manualmente: "${content.substring(contextStart, contextEnd)}"`);
        } else {
          logger.warn(`‚ùå DEBUG: "resuelve" NO encontrado en el contenido completo`);
        }
      }

      return fragments;

    } catch (error) {
      logger.error(`‚ùå Error seleccionando fragmentos: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con OpenAI GPT-4 Mini usando cola para evitar concurrencia
   */
  private async analyzeWithOpenAI(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    logger.info(`üîÑ Encolando an√°lisis para: ${documentTitle}`);
    
    return new Promise((resolve, reject) => {
      // Encolar el an√°lisis para procesamiento secuencial
      this.enqueueAnalysis(async () => {
        try {
          logger.info(`üîç Ejecutando an√°lisis desde cola para: ${documentTitle}`);
          const result = await this.executeOpenAIAnalysis(fragments, documentTitle);
          resolve(result);
        } catch (error) {
          logger.error(`‚ùå Error en an√°lisis desde cola para ${documentTitle}:`, error);
          reject(error);
        }
      });
    });
  }

  /**
   * Ejecutar an√°lisis con OpenAI GPT-4 Mini (m√©todo interno)
   */
  private async executeOpenAIAnalysis(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const openai = await this.getOpenAIClient();
      
      if (!openai) {
        logger.error('‚ùå No se pudo obtener cliente OpenAI');
        return null;
      }

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      // Log del prompt completo para debugging
      logger.info('üîç Enviando an√°lisis a OpenAI GPT-4 Mini...');
      logger.info('üìù PROMPT COMPLETO ENVIADO A OPENAI:');
      logger.info('=' .repeat(80));
      logger.info(prompt);
      logger.info('=' .repeat(80));

      const response = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Eres un asistente de IA experto en el an√°lisis y la s√≠ntesis de sentencias de la Corte Constitucional de Colombia. Tu tarea es procesar el documento legal que te proporcionar√© y extraer sus componentes m√°s importantes de manera clara y estructurada. No agregues opiniones ni informaci√≥n que no est√© expl√≠citamente en el texto.

El rol del asistente es ser un analista legal de documentos y un sintetizador de informaci√≥n.

El objetivo es identificar los componentes clave de una sentencia judicial de la Corte Constitucional, independientemente de su tipo (T, SU, C, etc.). Se debe extraer la siguiente informaci√≥n de forma precisa y estructurada: los hechos, el problema jur√≠dico, las consideraciones principales de la corte (la ratio decidendi) y, finalmente, la decisi√≥n o las √≥rdenes finales. El objetivo es que esta informaci√≥n sea comprensible para cualquier persona, sin necesidad de ser un experto en derecho.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.3, // Baja temperatura para respuestas m√°s consistentes
        response_format: { type: "json_object" }
      });

      const result = response.choices[0]?.message?.content;
      
      if (!result) {
        logger.error('‚ùå OpenAI no devolvi√≥ respuesta');
        return null;
      }

      // Log de la respuesta completa para debugging
      logger.info('ü§ñ RESPUESTA COMPLETA DE OPENAI:');
      logger.info('=' .repeat(80));
      logger.info(result);
      logger.info('=' .repeat(80));

      const parsedResult = JSON.parse(result);

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: null, // Los metadatos se extraen por c√≥digo separado
        magistradoPonente: null, // Los metadatos se extraen por c√≥digo separado
        salaRevision: null, // Los metadatos se extraen por c√≥digo separado
        expediente: null, // Los metadatos se extraen por c√≥digo separado
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gpt-4o-mini',
        confidencia: 0.9 // Alta confianza para an√°lisis conceptual enfocado
      };

    } catch (error) {
      logger.error(`‚ùå Error con OpenAI: ${error}`);
      return null;
    }
  }

  /**
   * An√°lisis con Google Gemini
   */
  private async analyzeWithGemini(
    fragments: FragmentSelection,
    documentTitle: string
  ): Promise<DocumentAnalysis | null> {
    try {
      const { GoogleGenerativeAI } = await import('@google/generative-ai');
      const genAI = new GoogleGenerativeAI(this.geminiApiKey!);
      const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

      const prompt = this.buildAnalysisPrompt(fragments, documentTitle);

      logger.info('üîç Enviando an√°lisis a Google Gemini...');

      const result = await model.generateContent([prompt]);
      const response = await result.response;
      const text = response.text();

      if (!text) {
        logger.error('‚ùå Gemini no devolvi√≥ respuesta');
        return null;
      }

      // Intentar parsear como JSON
      let parsedResult;
      try {
        // Limpiar la respuesta por si tiene caracteres extra
        const cleanedText = text.replace(/```json\s*|\s*```/g, '').trim();
        parsedResult = JSON.parse(cleanedText);
      } catch (parseError) {
        logger.warn('‚ö†Ô∏è  Respuesta de Gemini no es JSON v√°lido, parseando manualmente');
        
        // Fallback parsing manual simplificado
        parsedResult = {
          tema_principal: this.extractFromText(text, /tema principal:?\s*([^\n]+)/i),
          resumen: this.extractFromText(text, /resumen:?\s*([^\n]+)/i),
          decision: this.extractDecisionFromText(text)
        };
      }

      return {
        temaPrincipal: parsedResult.tema_principal || 'No identificado',
        resumenIA: parsedResult.resumen || 'No disponible',
        decision: parsedResult.decision || 'No identificada',
        numeroSentencia: null, // Los metadatos se extraen por c√≥digo separado
        magistradoPonente: null, // Los metadatos se extraen por c√≥digo separado
        salaRevision: null, // Los metadatos se extraen por c√≥digo separado
        expediente: null, // Los metadatos se extraen por c√≥digo separado
        fragmentosAnalizados: [
          fragments.introduccion.substring(0, 200),
          fragments.considerandos.substring(0, 300),
          fragments.resuelve.substring(0, 200)
        ],
        modeloUsado: 'gemini-2.5-flash',
        confidencia: 0.9 // Alta confianza para an√°lisis conceptual enfocado
      };

    } catch (error) {
      logger.error(`‚ùå Error con Gemini: ${error}`);
      return null;
    }
  }

  /**
   * Construir prompt de an√°lisis optimizado
   */
  private buildAnalysisPrompt(fragments: FragmentSelection, documentTitle: string): string {
    return `
**T√≠tulo del documento**: ${documentTitle}

**Fragmentos clave de la sentencia**:

**INTRODUCCI√ìN Y DATOS B√ÅSICOS**:
${fragments.introduccion}

**CONSIDERACIONES Y FUNDAMENTOS**:
${fragments.considerandos}

**PARTE RESOLUTIVA**:
${fragments.resuelve}

---

**Instrucciones para el an√°lisis:**

1. **An√°lisis del tema principal:** Identifica el tema central y la naturaleza del caso. El tema debe ser una descripci√≥n de no m√°s de 20 palabras.
   * **Ejemplo de respuesta:** "Protecci√≥n del derecho a la salud de un ni√±o ind√≠gena en estado de abandono."

2. **Resumen concreto:** Crea un resumen narrativo y conciso de los hechos, las partes involucradas y las consideraciones de la corte. El resumen debe tener un m√°ximo de 150 palabras.
   * **Puntos clave a incluir:**
     * Identidad de las partes (demandante y demandado).
     * Hechos relevantes que llevaron a la disputa.
     * Diagn√≥stico o situaci√≥n de la persona afectada.
     * Razones de la corte para tomar su decisi√≥n.

3. **Resumen de la decisi√≥n y parte resolutiva:** Elabora un resumen concreto y detallado de la parte resolutiva de la sentencia. Debe incluir:
   * La decisi√≥n principal adoptada por la Corte (conceder, negar, declarar exequible, etc.)
   * Las √≥rdenes espec√≠ficas emitidas por la Corte a las entidades involucradas
   * Los plazos establecidos para el cumplimiento (si aplica)
   * Las medidas de seguimiento ordenadas (si aplica)
   * El alcance y limitaciones de la decisi√≥n
   
   **Formato requerido:** Resumen narrativo de m√°ximo 120 palabras que explique QU√â decidi√≥ la Corte y QU√â √≥rdenes espec√≠ficas emiti√≥. No uses solo palabras como "CONCEDE" o "NIEGA", sino explica detalladamente las resoluciones adoptadas.

**FORMATO DE RESPUESTA** (Solo JSON, sin comentarios):
{
  "tema_principal": "Tema central del caso en m√°ximo 20 palabras",
  "resumen": "Resumen narrativo de m√°ximo 150 palabras incluyendo hechos, partes y consideraciones de la corte",
  "decision": "Resumen detallado de la parte resolutiva en m√°ximo 120 palabras explicando qu√© decidi√≥ la Corte y qu√© √≥rdenes espec√≠ficas emiti√≥"
}

**IMPORTANTE**: 
- Responde √öNICAMENTE el JSON, sin texto adicional
- No agregues campos que no se soliciten
- Mant√©n los l√≠mites de palabras especificados
`;
  }

  /**
   * Extraer texto usando regex (fallback para respuestas no JSON)
   */
  private extractFromText(text: string, regex: RegExp): string {
    const match = text.match(regex);
    return match ? match[1].trim() : 'No identificado';
  }

  /**
   * Extraer decisi√≥n con patrones espec√≠ficos para Corte Constitucional
   */
  private extractDecisionFromText(text: string): string {
    const lowerText = text.toLowerCase();
    
    // Patrones para decisiones INHIBIDAS (m√°s com√∫n en C-sentencias)
    if (lowerText.includes('inhibida') || lowerText.includes('se inhibe') || 
        lowerText.includes('declarar inhibida') || lowerText.includes('inhibirse')) {
      return 'INHIBIDA';
    }
    
    // Patrones para otras decisiones comunes
    if (lowerText.includes('exequible condicionado') || lowerText.includes('condicionalmente exequible')) {
      return 'EXEQUIBLE CONDICIONADO';
    }
    
    if (lowerText.includes('inexequible') || lowerText.includes('inconstitucional')) {
      return 'INEXEQUIBLE';
    }
    
    if (lowerText.includes('exequible')) {
      return 'EXEQUIBLE';
    }
    
    if (lowerText.includes('concede') && lowerText.includes('tutela')) {
      return 'CONCEDE LA TUTELA';
    }
    
    if (lowerText.includes('niega') && lowerText.includes('tutela')) {
      return 'NIEGA LA TUTELA';
    }
    
    if (lowerText.includes('inadmite')) {
      return 'INADMITE';
    }
    
    if (lowerText.includes('unifica')) {
      return 'UNIFICA JURISPRUDENCIA';
    }
    
    // Fallback con regex general
    const match = text.match(/decisi√≥n:?\s*([^\n]+)/i);
    return match ? match[1].trim() : 'No identificada';
  }

  /**
   * Verificar disponibilidad de servicios de IA
   */
  public getAvailableModels(): string[] {
    const models = [];
    if (this.openAiApiKey) models.push('openai');
    if (this.geminiApiKey) models.push('gemini');
    return models;
  }

  /**
   * Analizar m√∫ltiples documentos en lote (con l√≠mite de rate)
   */
  async analyzeBatch(
    documents: Array<{ id: string; content: string; title: string }>,
    model?: 'openai' | 'gemini'
  ): Promise<Array<{ id: string; analysis: DocumentAnalysis | null }>> {
    const results = [];
    
    logger.info(`üìä Iniciando an√°lisis en lote: ${documents.length} documentos`);

    for (let i = 0; i < documents.length; i++) {
      const doc = documents[i];
      
      logger.info(`üìÑ Procesando documento ${i + 1}/${documents.length}: ${doc.title}`);
      
      const analysis = await this.analyzeDocument(doc.content, doc.title, model);
      results.push({ id: doc.id, analysis });

      // Rate limiting: esperar entre an√°lisis
      if (i < documents.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 segundos entre llamadas
      }
    }

    logger.info(`‚úÖ An√°lisis en lote completado: ${results.filter(r => r.analysis).length}/${documents.length} exitosos`);

    return results;
  }

  /**
   * Detectar si el contenido es probablemente binario DOCX
   */
  private isLikelyDocxContent(content: string): boolean {
    // Verificar si contiene caracteres binarios t√≠picos de DOCX
    const binaryPattern = /[\x00-\x08\x0B\x0C\x0E-\x1F]/;
    const hasNullBytes = content.includes('\x00');
    const hasDocxSignature = content.includes('PK') && (content.includes('word/') || content.includes('document.xml'));
    const isVeryShort = content.length < 100;
    const hasHighBinaryRatio = (content.match(binaryPattern) || []).length / content.length > 0.1;

    return hasNullBytes || hasDocxSignature || (isVeryShort && hasHighBinaryRatio);
  }

  /**
   * Extraer texto de contenido DOCX binario
   */
  private async extractTextFromDocxContent(content: string, filename: string) {
    try {
      // Convertir string a buffer (asumiendo que es contenido binario)
      const buffer = Buffer.from(content, 'binary');
      
      // Verificar que sea realmente un archivo DOCX
      if (!DocumentTextExtractor.isDocxBuffer(buffer)) {
        logger.warn(`‚ö†Ô∏è  Contenido de ${filename} no parece ser DOCX v√°lido`);
        return null;
      }

      // Extraer texto usando el DocumentTextExtractor
      return await documentTextExtractor.extractFromBuffer(buffer, filename);
    } catch (error) {
      logger.error(`‚ùå Error extrayendo texto de ${filename}:`, error);
      return null;
    }
  }

  /**
   * Construir texto unificado a partir del contenido extra√≠do
   */
  private buildTextFromExtractedContent(extractedContent: any): string {
    const { structuredContent } = extractedContent;
    
    // Construir texto combinando las secciones estructuradas
    const sections = [];
    
    if (structuredContent.introduccion) {
      sections.push('=== INTRODUCCI√ìN ===\n' + structuredContent.introduccion);
    }
    
    if (structuredContent.considerandos) {
      sections.push('=== CONSIDERANDOS ===\n' + structuredContent.considerandos);
    }
    
    if (structuredContent.resuelve) {
      sections.push('=== RESUELVE ===\n' + structuredContent.resuelve);
    }
    
    if (structuredContent.otros && structuredContent.otros.length > 0) {
      sections.push('=== OTROS ELEMENTOS RELEVANTES ===\n' + structuredContent.otros.join('\n\n'));
    }
    
    return sections.join('\n\n');
  }

  /**
   * üéØ Extraer metadatos estructurales con regex (PRE-IA)
   * Funciona como sistema principal para campos estructurales espec√≠ficos
   */
  private extractMetadataWithRegex(content: string, documentTitle: string): Partial<DocumentAnalysis> {
    logger.info(`üîç DEBUG extractMetadataWithRegex: Iniciando extracci√≥n de metadatos, contenido: ${content.length} caracteres`);
    const metadata: Partial<DocumentAnalysis> = {};

    // Timeout para evitar bloqueos
    const startTime = Date.now();
    const TIMEOUT_MS = 15000; // 15 segundos m√°ximo
    
    // 1. Magistrado Ponente - Patrones simplificados para evitar catastrophic backtracking
    logger.info(`üîç DEBUG extractMetadataWithRegex: Extrayendo magistrado ponente...`);
    const magistradoPatterns = [
      // Patrones muy simplificados para evitar catastrophic backtracking
      /magistrado ponente[:\s]*([A-Z√Å√â√ç√ì√ö√ë][^\n]{5,40})/im,
      /magistrada ponente[:\s]*([A-Z√Å√â√ç√ì√ö√ë][^\n]{5,40})/im,
      /m\.p\.[:\s]*([A-Z√Å√â√ç√ì√ö√ë][^\n]{10,40})/im,
      /ponente[:\s]*([A-Z√Å√â√ç√ì√ö√ë][^\n]{10,40})/im
    ];
    
    for (let i = 0; i < magistradoPatterns.length; i++) {
      logger.info(`üîç DEBUG: Probando patr√≥n magistrado ${i + 1}/${magistradoPatterns.length}`);
      try {
        const pattern = magistradoPatterns[i];
        const match = content.match(pattern);
        if (match && match[1]) {
          logger.info(`üîç DEBUG: Match encontrado con patr√≥n ${i + 1}: "${match[1]}"`);
        } else {
          logger.info(`üîç DEBUG: No match con patr√≥n ${i + 1}`);
          continue;
        }
        let cleanName = match[1].trim()
          .replace(/\.$/, '') // Eliminar punto final
          .replace(/\s+/g, ' ') // Normalizar espacios
          .replace(/[^\w\s√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë]/g, '') // Solo letras, n√∫meros, espacios y tildes
          .trim();

        logger.info(`üîç DEBUG: Nombre limpiado: "${cleanName}"`);

        // Validaci√≥n mejorada: debe tener al menos 2 palabras y formato de nombre
        const words = cleanName.split(' ').filter(w => w.length > 0);
        const isValidName = words.length >= 2 && words.length <= 5 &&
                           cleanName.length >= 10 && cleanName.length <= 60 &&
                           /^[A-Z√Å√â√ç√ì√ö√ë]/.test(cleanName) && // Comienza con may√∫scula
                           !/\d{2,}/.test(cleanName); // No tiene secuencias largas de n√∫meros

        logger.info(`üîç DEBUG: Validaci√≥n nombre - palabras: ${words.length}, longitud: ${cleanName.length}, v√°lido: ${isValidName}`);

        if (isValidName) {
          // Capitalizar correctamente
          metadata.magistradoPonente = cleanName
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
          logger.info(`üîß Regex extrajo magistrado: "${metadata.magistradoPonente}"`);
          break;
        } else {
          logger.warn(`‚ö†Ô∏è Regex descart√≥ magistrado inv√°lido: "${cleanName}" (palabras: ${words.length})`);
        }
      } catch (error) {
        logger.error(`‚ùå Error con patr√≥n magistrado ${i + 1}:`, error);
      }

      // Verificar timeout
      if (Date.now() - startTime > TIMEOUT_MS) {
        logger.warn(`‚ö†Ô∏è Timeout en extracci√≥n de magistrado despu√©s de ${TIMEOUT_MS}ms`);
        break;
      }
    }

    logger.info(`üîç DEBUG: Magistrado completado en ${Date.now() - startTime}ms`);

    // 2. Expediente - Patrones mejorados
    const expedientePatterns = [
      // Patrones m√°s espec√≠ficos para expedientes v√°lidos
      /expediente[:\s]*\n?\s*([A-Z]-\d{1,2}[.,]?\d{3,4})\s*\.?(?:\s|$|,|\n)/im,
      /exp\.[\s:]*([A-Z]-\d{1,2}[.,]?\d{3,4})\s*\.?(?:\s|$|,|\n)/im,
      /radicaci[o√≥]n[:\s]*([A-Z]-\d{1,2}[.,]?\d{3,4})\s*\.?(?:\s|$|,|\n)/im,
      // Patr√≥n para expedientes con formato T-########
      /expediente[:\s]*\n?\s*([T]-\d{6,8})\s*\.?(?:\s|$|,|\n)/im,
      // Patr√≥n de respaldo m√°s general
      /expediente[:\s]*\n?\s*([A-Z]-[\d.]{3,10})\s*\.?(?:\s|$|,|\n)/im
    ];
    
    for (const pattern of expedientePatterns) {
      const match = content.match(pattern);
      if (match) {
        let expediente = match[1].trim().replace(/\.$/, ''); // Eliminar punto final
        // Normalizar separadores de miles (punto a coma si es necesario)
        if (expediente.includes('.') && expediente.match(/\d\.\d{3}/)) {
          // Solo si parece ser separador de miles, no punto decimal
          // Ejemplo: D-15.479 -> mantener; D-15.4 -> mantener
        }
        
        // Validar formato de expediente (letra-n√∫meros con posibles puntos/comas)
        if (/^[A-Z]-[\d.,]{1,10}$/.test(expediente) && expediente.length <= 15) {
          metadata.expediente = expediente;
          logger.info(`üîß Regex extrajo expediente: "${metadata.expediente}"`);
          break;
        } else {
          logger.warn(`‚ö†Ô∏è Regex descart√≥ expediente inv√°lido: "${expediente}"`);
        }
      }
    }
    
    // 3. N√∫mero de Sentencia - PRIORIDAD: Extraer del t√≠tulo PRIMERO
    const sentenciaPatterns = [
      // Patrones para buscar en t√≠tulo y contenido
      /sentencia\s+([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im,
      /sentencia\s+(?:no\.?\s*|n√∫mero\s*)?([CT]-\d+(?:\s+de\s+|\s*\/\s*|\s*-\s*)\d{2,4})/im,
      /(?:^|\n)\s*([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})(?:\s|$)/im,
      // Patr√≥n directo para capturar formato est√°ndar
      /([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im
    ];

    // üéØ PASO 1: Buscar PRIMERO en el t√≠tulo del documento
    for (const pattern of sentenciaPatterns) {
      const titleMatch = documentTitle.match(pattern);
      
      if (titleMatch) {
        // Normalizar formato: C-223 DE 2025 ‚Üí C-223/25
        const numeroNormalizado = titleMatch[1].toUpperCase()
          .replace(/\s+DE\s+/, '/').replace(/\s*-\s*/, '/').replace(/\s/g, '');
        
        // Validar a√±o
        const yearMatch = numeroNormalizado.match(/\/(\d{2,4})$/);
        if (yearMatch) {
          const year = parseInt(yearMatch[1]);
          const fullYear = year < 100 ? (year < 50 ? 2000 + year : 1900 + year) : year;
          
          if (fullYear >= 2020) {
            metadata.numeroSentencia = numeroNormalizado;
            logger.info(`‚úÖ Regex extrajo n√∫mero del T√çTULO: "${metadata.numeroSentencia}" (a√±o v√°lido: ${fullYear})`);
            break;
          }
        } else {
          metadata.numeroSentencia = numeroNormalizado;
          logger.info(`‚úÖ Regex extrajo n√∫mero del T√çTULO: "${metadata.numeroSentencia}"`);
          break;
        }
      }
    }
    
    // üéØ PASO 2: Solo si no se encontr√≥ en el t√≠tulo, buscar en el contenido (con m√°s restricciones)
    if (!metadata.numeroSentencia) {
      const restrictivePatterns = [
        // Patrones muy espec√≠ficos para evitar referencias cruzadas
        /sentencia\s+([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})/im,
        /(?:^|\n)\s*([CT]-\d+(?:\s*\/\s*|\s*-\s*)\d{2,4})(?:\s|$)/im
      ];
      
      for (const pattern of restrictivePatterns) {
        const match = content.match(pattern);
        
        if (match) {
          const numeroNormalizado = match[1].toUpperCase()
            .replace(/\s+DE\s+/, '/').replace(/\s*-\s*/, '/').replace(/\s/g, '');
          
          // Para contenido, ser m√°s restrictivo con a√±os (solo 2023-2025)
          const yearMatch = numeroNormalizado.match(/\/(\d{2,4})$/);
          if (yearMatch) {
            const year = parseInt(yearMatch[1]);
            const fullYear = year < 100 ? (year < 50 ? 2000 + year : 1900 + year) : year;
            
            if (fullYear >= 2023) {
              metadata.numeroSentencia = numeroNormalizado;
              logger.info(`‚ö†Ô∏è Regex extrajo n√∫mero del CONTENIDO (fallback): "${metadata.numeroSentencia}" (a√±o v√°lido: ${fullYear})`);
              break;
            } else {
              logger.info(`üîß Regex descart√≥ n√∫mero del contenido: "${numeroNormalizado}" (a√±o muy antiguo: ${fullYear})`);
            }
          }
        }
      }
    }
    
    // 4. Sala de Revisi√≥n - Patrones mejorados y m√°s espec√≠ficos
    const salaPatterns = [
      // Patrones exactos para salas conocidas
      /\b(sala\s+plena)(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+primera)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+segunda)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+tercera)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+cuarta)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+quinta)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+sexta)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+s[√©e]ptima)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+octava)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      /\b(sala\s+novena)(?:\s+de\s+revisi[√≥o]n)?(?:\s|$|,|\.|\n)/im,
      // Patrones con guiones
      /-\s*(sala\s+(?:plena|primera|segunda|tercera|cuarta|quinta|sexta|s[√©e]ptima|octava|novena))\s*-/im,
      // Patr√≥n m√°s espec√≠fico para evitar capturas largas
      /(?:^|\n|\.)\s*(sala\s+(?:plena|primera|segunda|tercera|cuarta|quinta|sexta|s[√©e]ptima|octava|novena))(?:\s+de\s+revisi[√≥o]n)?\s*(?:$|,|\.|\n)/im
    ];
    
    for (const pattern of salaPatterns) {
      const match = content.match(pattern);
      if (match) {
        let sala = match[1].trim()
          .replace(/\s+/g, ' ') // Normalizar espacios
          .replace(/\b\w/g, l => l.toUpperCase()); // Title Case
        
        // Lista de salas v√°lidas conocidas para validaci√≥n
        const salasValidas = [
          'Sala Plena', 'Sala Primera', 'Sala Segunda', 'Sala Tercera', 
          'Sala Cuarta', 'Sala Quinta', 'Sala Sexta', 'Sala S√©ptima', 
          'Sala Septima', 'Sala Octava', 'Sala Novena'
        ];
        
        // Validar que la sala est√° en la lista o es una variaci√≥n v√°lida
        const salaValida = salasValidas.some(validSala => 
          validSala.toLowerCase() === sala.toLowerCase() ||
          (validSala + ' De Revisi√≥n').toLowerCase() === sala.toLowerCase()
        );
        
        if (salaValida && sala.length <= 30) {
          metadata.salaRevision = sala;
          logger.info(`üîß Regex extrajo sala: "${metadata.salaRevision}"`);
          break;
        } else {
          logger.warn(`‚ö†Ô∏è Regex descart√≥ sala inv√°lida: "${sala}"`);
        }
      }
    }
    
    return metadata;
  }

  /**
   * üéØ Combinar metadatos regex (prioritarios) + IA (complementarios)
   */
  private combineMetadata(regexData: Partial<DocumentAnalysis>, aiData: DocumentAnalysis): DocumentAnalysis {
    // Los metadatos de regex tienen prioridad para campos estructurales
    return {
      ...aiData, // Base de IA (tema, resumen, decisi√≥n)
      // Campos estructurales: regex tiene prioridad
      numeroSentencia: regexData.numeroSentencia || aiData.numeroSentencia,
      magistradoPonente: regexData.magistradoPonente || aiData.magistradoPonente,
      salaRevision: regexData.salaRevision || aiData.salaRevision,
      expediente: regexData.expediente || aiData.expediente,
      // Marcar que se us√≥ sistema h√≠brido
      modeloUsado: aiData.modeloUsado + (
        (regexData.magistradoPonente || regexData.expediente || regexData.numeroSentencia)
          ? ' + regex-extractor'
          : ''
      )
    };
  }

  /**
   * Analizar documento desde archivo f√≠sico DOCX
   */
  async analyzeDocumentFromFile(
    filePath: string,
    documentTitle: string,
    model?: 'openai' | 'gemini'
  ): Promise<DocumentAnalysis | null> {
    try {
      logger.info(`üìÅ Analizando documento desde archivo: ${filePath}`);

      // Verificar si es archivo DOCX
      if (!DocumentTextExtractor.isDocxFile(filePath)) {
        logger.warn(`‚ö†Ô∏è  ${filePath} no parece ser un archivo DOCX v√°lido`);
        
        // Intentar leer como texto plano
        const textContent = fs.readFileSync(filePath, 'utf8');
        return await this.analyzeDocument(textContent, documentTitle, model);
      }

      // Extraer texto del archivo DOCX
      const extractedContent = await documentTextExtractor.extractFromDocxFile(filePath);

      if (!extractedContent) {
        logger.error(`‚ùå No se pudo extraer contenido de ${filePath}`);
        return null;
      }

      logger.info(`üîç DEBUG: Secciones extra√≠das directamente - Intro: ${extractedContent.structuredContent.introduccion.length}ch, Considerandos: ${extractedContent.structuredContent.considerandos.length}ch, Resuelve: ${extractedContent.structuredContent.resuelve.length}ch`);

      // üéØ CORRECCI√ìN: Usar directamente las secciones extra√≠das SIN doble procesamiento
      const fragments: FragmentSelection = {
        introduccion: extractedContent.structuredContent.introduccion || '',
        considerandos: extractedContent.structuredContent.considerandos || '',
        resuelve: extractedContent.structuredContent.resuelve || '',
        otros: extractedContent.structuredContent.otros || []
      };

      logger.info(`‚úÖ Usando secciones directas del archivo DOCX (evita duplicaci√≥n)`);
      logger.info(`üìã Fragmentos directos - Intro: ${fragments.introduccion.length}ch, Considerandos: ${fragments.considerandos.length}ch, Resuelve: ${fragments.resuelve.length}ch`);

      // Extraer metadatos con regex directamente del texto estructurado
      const textContent = this.buildTextFromExtractedContent(extractedContent);
      const regexMetadata = this.extractMetadataWithRegex(textContent, documentTitle);

      // Realizar an√°lisis directo con las secciones sin doble extracci√≥n
      let analysis: DocumentAnalysis | null = null;

      if (model === 'openai' && this.openAiApiKey) {
        analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
      } else if (model === 'gemini' && this.geminiApiKey) {
        analysis = await this.analyzeWithGemini(fragments, documentTitle);
      } else {
        // Usar modelo por defecto
        if (this.defaultModel === 'openai' && this.openAiApiKey) {
          analysis = await this.analyzeWithOpenAI(fragments, documentTitle);
        } else if (this.defaultModel === 'gemini' && this.geminiApiKey) {
          analysis = await this.analyzeWithGemini(fragments, documentTitle);
        }
      }

      if (analysis) {
        // Combinar metadatos regex con an√°lisis IA
        analysis = this.combineMetadata(regexMetadata, analysis);

        // Agregar metadata de extracci√≥n
        analysis.fragmentosAnalizados = [
          `Extra√≠do con ${extractedContent.metadata.extractionMethod}`,
          `${extractedContent.metadata.wordCount} palabras`,
          `Estructura: ${extractedContent.metadata.hasStructure ? 'Detectada' : 'No detectada'}`
        ];
      }

      return analysis;

    } catch (error) {
      logger.error(`‚ùå Error analizando archivo ${filePath}:`, error);
      return null;
    }
  }
}

// Instancia singleton del servicio
export const aiAnalysisService = new AiAnalysisService();