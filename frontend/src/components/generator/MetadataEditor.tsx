import { useState, useEffect } from 'react'
import { 
  Tags, 
  Hash, 
  AlignLeft, 
  Sparkles, 
  Plus,
  X,
  Target,
  Eye,
  Search
} from 'lucide-react'
import { clsx } from 'clsx'

interface MetadataEditorProps {
  document: any
  articleTitle: string
  onMetadataChange: (metadata: ArticleMetadata) => void
  initialMetadata?: ArticleMetadata
}

interface ArticleMetadata {
  description: string
  keywords: string[]
  section: string
  customTags: string[]
  seoTitle: string
  readingTime: number
}

const LEGAL_SECTIONS = [
  'Constitucional',
  'Civil',
  'Penal',
  'Laboral',
  'Administrativo',
  'Tributario',
  'Comercial',
  'Familia',
  'Internacional',
  'Ambiental'
]

const SUGGESTED_KEYWORDS = [
  'jurisprudencia',
  'sentencia',
  'corte suprema',
  'corte constitucional',
  'derechos fundamentales',
  'debido proceso',
  'tutela',
  'amparo',
  'constitución',
  'ley',
  'decreto',
  'resolución',
  'análisis jurídico',
  'precedente judicial'
]

export default function MetadataEditor({ 
  document, 
  articleTitle,
  onMetadataChange,
  initialMetadata 
}: MetadataEditorProps) {
  const [metadata, setMetadata] = useState<ArticleMetadata>(
    initialMetadata || {
      description: '',
      keywords: [],
      section: document?.area || 'Constitucional',
      customTags: [],
      seoTitle: articleTitle || '',
      readingTime: 3
    }
  )
  
  const [newKeyword, setNewKeyword] = useState('')
  const [newTag, setNewTag] = useState('')
  const [isGeneratingMeta, setIsGeneratingMeta] = useState(false)

  // Sincronizar con props iniciales
  useEffect(() => {
    if (initialMetadata) {
      setMetadata(initialMetadata)
    } else if (articleTitle && !metadata.seoTitle) {
      setMetadata(prev => ({ ...prev, seoTitle: articleTitle }))
    }
  }, [articleTitle, initialMetadata])

  // Notificar cambios al componente padre con debounce para evitar flickering
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      onMetadataChange(metadata)
    }, 100)
    
    return () => clearTimeout(timeoutId)
  }, [metadata, onMetadataChange])

  const generateMetadata = async () => {
    setIsGeneratingMeta(true)
    try {
      console.log('Generando metadata automática para:', articleTitle)
      
      // Simulación de generación automática
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      const autoGeneratedMeta = {
        description: `Análisis jurídico completo sobre ${document?.identifier}. Revisamos las implicaciones legales, precedentes y efectos de esta decisión judicial en el sistema jurídico colombiano.`,
        keywords: [
          document?.area.toLowerCase(),
          'jurisprudencia',
          document?.source.includes('corte-constitucional') ? 'constitucional' : 'judicial',
          'análisis legal',
          'colombia',
          document?.type.toLowerCase()
        ].filter(Boolean),
        readingTime: Math.min(Math.ceil(articleTitle.length / 200) + 1, 3)
      }
      
      setMetadata(prev => ({
        ...prev,
        ...autoGeneratedMeta
      }))
    } catch (error) {
      console.error('Error generando metadata:', error)
    } finally {
      setIsGeneratingMeta(false)
    }
  }

  const addKeyword = (keyword: string) => {
    if (keyword.trim() && !metadata.keywords.includes(keyword.trim().toLowerCase())) {
      setMetadata(prev => ({
        ...prev,
        keywords: [...prev.keywords, keyword.trim().toLowerCase()]
      }))
      setNewKeyword('')
    }
  }

  const removeKeyword = (keywordToRemove: string) => {
    setMetadata(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keywordToRemove)
    }))
  }

  const addCustomTag = (tag: string) => {
    if (tag.trim() && !metadata.customTags.includes(tag.trim())) {
      setMetadata(prev => ({
        ...prev,
        customTags: [...prev.customTags, tag.trim()]
      }))
      setNewTag('')
    }
  }

  const removeCustomTag = (tagToRemove: string) => {
    setMetadata(prev => ({
      ...prev,
      customTags: prev.customTags.filter(t => t !== tagToRemove)
    }))
  }

  const updateField = (field: keyof ArticleMetadata, value: any) => {
    setMetadata(prev => ({
      ...prev,
      [field]: value
    }))
  }

  return (
    <div className="h-full flex flex-col space-y-4">
      <div className="text-center">
        <button
          onClick={generateMetadata}
          disabled={isGeneratingMeta}
          className={clsx(
            'inline-flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors',
            isGeneratingMeta
              ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500 cursor-not-allowed'
              : 'bg-[#04315a] text-[#3ff3f2] hover:bg-[#062847]'
          )}
        >
          {isGeneratingMeta ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400 dark:border-gray-500"></div>
              <span>Generando...</span>
            </>
          ) : (
            <>
              <Sparkles className="w-4 h-4" />
              <span>Generar automáticamente</span>
            </>
          )}
        </button>
      </div>

      <div className="flex-1 grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Columna 1 - Sección */}
        <div className="space-y-4">
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Hash className="w-4 h-4" />
              <span>Sección</span>
            </label>
            <select
              value={metadata.section}
              onChange={(e) => updateField('section', e.target.value)}
              className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-[#04315a] focus:border-[#04315a] bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
            >
              {LEGAL_SECTIONS.map((section) => (
                <option key={section} value={section}>
                  {section}
                </option>
              ))}
            </select>
          </div>
          
          {/* Tiempo de lectura */}
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Eye className="w-4 h-4" />
              <span>Tiempo de lectura</span>
            </label>
            <div className="flex items-center space-x-3">
              <input
                type="range"
                min="1"
                max="3"
                value={metadata.readingTime}
                onChange={(e) => updateField('readingTime', parseInt(e.target.value))}
                className="flex-1"
              />
              <span className="text-sm text-gray-600 dark:text-gray-400 w-12">
                {metadata.readingTime} min
              </span>
            </div>
          </div>
        </div>

        {/* Columna 2 - Palabras clave */}
        <div className="space-y-4">
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Search className="w-4 h-4" />
              <span>Palabras clave</span>
            </label>
            
            <div className="space-y-2">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={newKeyword}
                  onChange={(e) => setNewKeyword(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addKeyword(newKeyword)}
                  className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-[#04315a] focus:border-[#04315a] text-sm bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                  placeholder="Nueva palabra clave"
                />
                <button
                  onClick={() => addKeyword(newKeyword)}
                  className="px-3 py-2 bg-[#04315a] text-[#3ff3f2] rounded hover:bg-[#062847] transition-colors"
                >
                  <Plus className="w-3 h-3" />
                </button>
              </div>
              
              {metadata.keywords.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {metadata.keywords.map((keyword) => (
                    <span
                      key={keyword}
                      className="inline-flex items-center space-x-1 px-2 py-1 bg-[#3ff3f2] bg-opacity-20 text-[#04315a] rounded-full text-xs dark:bg-[#04315a] dark:text-[#3ff3f2]"
                    >
                      <span>{keyword}</span>
                      <button
                        onClick={() => removeKeyword(keyword)}
                        className="hover:text-[#062847] dark:hover:text-[#3ff3f2]"
                      >
                        <X className="w-2 h-2" />
                      </button>
                    </span>
                  ))}
                </div>
              )}
              
              <div>
                <div className="flex flex-wrap gap-1">
                  {SUGGESTED_KEYWORDS
                    .filter(keyword => !metadata.keywords.includes(keyword))
                    .slice(0, 6)
                    .map((keyword) => (
                      <button
                        key={keyword}
                        onClick={() => addKeyword(keyword)}
                        className="px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                      >
                        + {keyword}
                      </button>
                    ))
                  }
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Columna 3 - Etiquetas personalizadas */}
        <div className="space-y-4">
          <div>
            <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Tags className="w-4 h-4" />
              <span>Etiquetas</span>
            </label>
            
            <div className="space-y-2">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addCustomTag(newTag)}
                  className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-[#04315a] focus:border-[#04315a] text-sm bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                  placeholder="Nueva etiqueta"
                />
                <button
                  onClick={() => addCustomTag(newTag)}
                  className="px-3 py-2 bg-gray-600 dark:bg-gray-500 text-white rounded hover:bg-gray-700 dark:hover:bg-gray-400 transition-colors"
                >
                  <Plus className="w-3 h-3" />
                </button>
              </div>
              
              {metadata.customTags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {metadata.customTags.map((tag) => (
                    <span
                      key={tag}
                      className="inline-flex items-center space-x-1 px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-xs"
                    >
                      <span>{tag}</span>
                      <button
                        onClick={() => removeCustomTag(tag)}
                        className="hover:text-gray-900 dark:hover:text-gray-100"
                      >
                        <X className="w-2 h-2" />
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
          
          {/* Vista previa compacta */}
          <div className="bg-gray-50 dark:bg-gray-800 rounded p-3 border dark:border-gray-600">
            <h5 className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">Vista previa</h5>
            <div className="bg-white dark:bg-gray-700 rounded border dark:border-gray-600 p-2">
              <div className="text-blue-600 dark:text-[#3ff3f2] text-sm font-medium truncate">
                {articleTitle}
              </div>
              <div className="text-green-700 dark:text-green-400 text-xs mt-1 truncate">
                periodico-juridico.com/articulos/{metadata.section.toLowerCase()}
              </div>
              <div className="flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400 mt-1">
                <span>⏱️ {metadata.readingTime}min</span>
                <span>📂 {metadata.section}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}